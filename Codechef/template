#pragma GCC optimize(" unroll-loops")
#pragma gcc optimize("Ofast")
#pragma GCC optimization("Ofast")
#pragma optimize(Ofast)
#include <bits/stdc++.h>
using namespace std; 
typedef unsigned long long ll;
typedef long double lld;
typedef pair<int,int> pi;
#define jk          ios_base::sync_with_stdio(false),cin.tie(nullptr),cout.tie(nullptr);srand(time(NULL))
#define ll        long long 
#define mod       (ll) 998244353
#define pb        push_back
#define f(i,s,n)    for (int i=s;i<n;i++)
#define fb(i,s,n,b)    for (int i=s;i<n;i+=b)
#define frev(i,s,n) for(int i=s;i>n;i--)
#define vii       vector<int
#define vll       vector<ll>
#define seti      set<int>
#define setll     set<ll>
#define pairi     pair<int,int>
#define mapi      unordered_map<int,int>
#define mapv      map<int,vii>
#define vll       vector<ll>
#define vpp       vector<pp>
#define vss       vector<string>
#define lcm(a,b)  (a*b)/__gcd(a,b)
#define all(a)     a.begin(),a.end()
#define all(a)     a.begin(),a.end()
#define fo(i,a)    for(auto &i:a)
#define bs(v,x)    binary_search(all(v),x)
#define sortrev(a) sort(a.begin(), a.end(), greater<pair<pair<int,int>,int>>());
#define vii2d      vector<vector<int>>
#define ms         multiset<int>
#define pairi      pair<int,int>
#define useti      unordered_set<int>
#define mp         make_pair
#define gcd(a,b)   __gcd(a,b)
#define fori(i,arr)for (auto &i:arr)
#define input(arr) for(auto &i:arr) cin>>i;
#define ff first 
#define se second

/*
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define se second
#define fi first
#define le length

//constants 
const int md=1e9+7;
const int MOD=998244353;
const int _N=3e5+5;
const int _MAX=3e5+5;
const int _M=1e6+5;
const int INF=1e18;

//string palindrome function
bool palin(string s){ 
    int i=0; int j=s.le()-1; 
    while(i<=j){ 
        if(s[i]!=s[j]) return false;
        i++; j--;
    } 
    return true; 
}

//string to integer conversion function
int str_to_int(string s){ 
    int num=0; int po=1; 
    rloop(s.le()-1,0){ 
        num+=po*(s[i]-'0');
        po*=10; 
     } 
    return num;
}

//decimal to binary(string) conversion function
string dec_to_bin(int n){ 
    string res=""; 
    while(n){ 
        res+=(char)( '0' + n % 2 );
         n>>=2; 
    } 
    reverse(res.begin(),res.end()); 
    return res; 
}

//reverse a number 
int rev_a_num(int num){ 
    int ans=0; 
    while(num){ 
        int rem=num%10; 
        ans*=10+rem; 
        num/=10; 
    } 
    return ans; 
}

// modular power function
int mod_pow(int a , int b ,int MOD){  
    int res=1; 
    while(b){ 
        if(b&1) res=(res*a)%MOD; 
        a=(a*a)%MOD;
        b>>=1; 
    } 
    return res;
} 

//calculate power in O(nlogn) complexity
int _pow(int a,int b){ 
    int res=1; 
    while(b){ 
        if(b&1) res=res*a; 
        a=a*a; 
        b>>=1; 
    } 
    return res; 
}

//finding gcd of two integers
int _gcd(int a,int b){ 
    if(b>a){ 
        int temp=a; 
        a=b; 
        b=temp; 
    } 
    if(b==0)  return a; 
    return _gcd(b,a%b); 
}


// Binary search function 
int binary_search(int dp[] , int n , int key) { 
    int start = 1; 
    int end = n; 
    while(start <= end) { 
        int mid = (start + end) / 2; 
        if(dp[mid] == key) 
            return mid; 
        else if (dp[mid] > key) 
            end = mid - 1; 
        else 
            start = mid + 1; 
    } 
    // if key not found returns -1
    return -1; 
} 
*/

#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")
#include <bits/stdc++.h>
using namespace std; 

ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

//tree
vector<vector<int>> arr(n);
    int u,v;
    int m=n-1;
    for(int i=0;i<m;i++)
    {
        cin>>u>>v;
        arr[u].push_back(v);
        arr[v].push_back(u);
    }
    1--> 3,4,5
    3-->4,5
    6--> 4,5,6
